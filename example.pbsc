REM Absolutally all whitespace at the begining of lines are ignored. ;
REM Comments are lines starting with `REM' and ending in ; ;

REM All lines (including comments) must end in ; ;

REM ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
REM Constants must start with #;
DEFINE #start 10;
DEFINE #limit 10;

REM ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
REM Variables: Only types are int and list;
REM Ints can be used as bools. 0 false. not 0 true.
REM All lists require a length argument as well as the variable name ;
REM List lengths must be either constants or literals
REM Legal variable names must not be keywords;
REM They may only have [a-z][A-Z][0-9]_ and must not start with a digit;

INT x; 
INT y; 
INT itter; 
LIST vals 10;
LIST vals2 #limit;

REM ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
REM Assignment;
REM The expressions are in LISP form 

SET x = 0;
SET x = (< 1 3);
SET y = (/ (+ x 16) 2);
SET vals[(- x 1)] = 42;
SET vals[2] = (- y vals[(- x 5)]);

REM May set lists in place;
REM you may only use constants and literals;
SETL vals 1 2 3 4 #limit 6;

REM ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
REM Conditionals;

IF (AND (< x y) vals[#start]);
REM do stuff;
ELSE;
REM do other stuff;
REM ELSE is optional;
FI;

REM ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
REM WHILE loops;

WHILE (AND (< x y) vals[#start]);
REM do stuff;
IF (= x y); BREAK; FI;
IF (< x 7); CONTINUE; FI;
DONE;

REM ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
REM FOR loops;

FOR itter #start #limit 1;
REM do stuff;
IF (= x y); BREAK; FI;
IF (< x 7); CONTINUE; FI;
ROF;

REM ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
REM GOTO/GOSUB;
REM Label names have the same rules as variable names

LABEL place;
IF (= x y); GOTO place; FI;

REM subroutines will be skipped unless called. They may not be branched into;
REM or out of.;
SUB subroutine
    REM Do stuff;
BUS;

IF (= x y); GOSUB subroutine; FI;

REM DEFAULT is required;
CASE (+ x 1)
    ON 5 label1 
    ON 7 label2
    ON 9 label4
    DEFAULT err
ESAC;

REM ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
REM I/O

REM to detect errors, append I/O statements with `ON error_number label"

PRINT (+ 1 2)
ON 1 err1
ON 2 err1;

PRINTL vals;

READ x;
READ vals[0];
READ vals[(+ 6 8)];

